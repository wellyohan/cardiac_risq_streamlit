import streamlit as st
import joblib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction de risque de maladie cardiaque",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Sidebar de navigation
with st.sidebar:
    # Charger le fichier CSS
    def load_css(file_name):
        with open(file_name) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
# Appliquer le CSS
    load_css("./css/pre.css")

# Chargement des artefacts
@st.cache_resource
def load_artifacts(job: str, feature: str):
    try:
        model = joblib.load(job)
        feature_names = joblib.load(feature)
        return model, feature_names
    except FileNotFoundError as e:
        st.error(f"Erreur de chargement: {e}. Veuillez d'abord ex√©cuter les notebooks Jupyter")
        return None, None

@st.cache_data
def load_data():
    data = pd.read_csv("./csv/cleaned_dataset.csv")
    return data

# Chargement des donn√©es
dataset = load_data()
model, feature_names = load_artifacts(
    './params/joblib/heart_model_pipeline_decision_tree.joblib', 
    './params/joblib/feature_names_decision_tree.joblib'
)


# En-t√™te de l'application
st.markdown('<div class="header"><h1>Pr√©diction m√©dicale de risque de maladie cardiaque</h1></div>', unsafe_allow_html=True)

# Onglets
tab1, tab2, tab3 = st.tabs(["üìã Pr√©diction", "üìä Analyse des Donn√©es", "‚ÑπÔ∏è Aide & Informations"])

with tab1:
    # Section de saisie organis√©e en colonnes
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Informations d√©mographiques")
        age = st.slider("√Çge", min_value=1, max_value=120, value=50, 
                       help="√Çge du patient en ann√©es")
        sex = st.selectbox("Sexe", options=[0, 1], 
                          format_func=lambda x: "Femme" if x == 0 else "Homme")
        
        st.subheader("Param√®tres cliniques")
        trestbps = st.slider("Pression art√©rielle au repos (mm Hg)", 
                            min_value=90, max_value=200, value=120)
        chol = st.slider("Cholest√©rol (mg/dl)", 
                        min_value=100, max_value=600, value=200)
        
    with col2:
        st.subheader("Sympt√¥mes et tests")
        cp = st.selectbox("Type de douleur thoracique", options=[0, 1, 2, 3],
                         help="0: Typique angine\n1: Douleur atypique\n2: Douleur non-angineuse\n3: Asymptomatique")
        fbs = st.selectbox("Glyc√©mie √† jeun > 120 mg/dl", options=[0, 1],
                          help="0: Non\n1: Oui")
        exang = st.selectbox("Angine induite par l'effort", options=[0, 1],
                           help="0: Non\n1: Oui")
        oldpeak = st.slider("D√©pression ST induite (mm)", 
                           min_value=0.0, max_value=10.0, value=1.0, step=0.1)
    
    # Deuxi√®me ligne de colonnes
    col3, col4 = st.columns(2)
    with col3:
        st.subheader("R√©sultats ECG")
        restecg = st.selectbox("R√©sultat ECG au repos", options=[0, 1, 2],
                             help="0: Normal\n1: Anomalie onde ST-T\n2: Hypertrophie ventriculaire gauche")
    with col4:
        st.subheader("Param√®tres avanc√©s")
        slope = st.selectbox("Pente du segment ST", options=[0, 1, 2],
                           help="0: Pente descendante\n1: Plat\n2: Pente ascendante")
    
    # Bouton de pr√©diction
    if st.button("Analyser le risque cardiaque", use_container_width=True):
        # Cr√©ation du dataframe d'entr√©e
        input_dict = {
            'age': age,
            'sex': sex,
            'chest pain type': cp,
            'resting bp s': trestbps,
            'cholesterol': chol,
            'fasting blood sugar': fbs,
            'resting ecg': restecg,
            'exercise angina': exang,
            'oldpeak': oldpeak,
            'ST slope': slope
        }
        
        input_df = pd.DataFrame([input_dict], columns=feature_names)
        
        # Pr√©diction
        try:
            prediction = model.predict(input_df)
            proba = model.predict_proba(input_df)[0]
            
            # Affichage des r√©sultats
            st.markdown("---")
            st.subheader("üìä R√©sultats de l'analyse")
            
            # Jauge de risque visuelle
            risk_level = proba[1] * 100
            if risk_level < 30:
                risk_color = "#28a745"
                risk_label = "Faible"
            elif risk_level < 70:
                risk_color = "#ffc107"
                risk_label = "Mod√©r√©"
            else:
                risk_color = "#dc3545"
                risk_label = "√âlev√©"
            
            col_res1, col_res2 = st.columns([1, 2])
            with col_res1:
                st.markdown(f"""
                <div style="text-align: center;">
                    <h2 style="color: {risk_color};">{risk_label}</h2>
                    <h3>{risk_level:.1f}% de risque</h3>
                </div>
                """, unsafe_allow_html=True)
                
                # Graphique de probabilit√©
                fig, ax = plt.subplots(figsize=(8, 2))
                ax.barh(["Risque"], [risk_level], color=risk_color, height=0.3)
                ax.set_xlim(0, 100)
                ax.set_xticks([0, 25, 50, 75, 100])
                ax.set_xticklabels(['0%', '25%', '50%', '75%', '100%'])
                ax.set_title('Niveau de risque cardiaque')
                st.pyplot(fig)
                
            with col_res2:
                if prediction[0] == 1:
                    st.error("**Conclusion:** Risque √©lev√© de maladie cardiaque d√©tect√©")
                else:
                    st.success("**Conclusion:** Risque faible de maladie cardiaque d√©tect√©")
                
                # Graphique d√©taill√© des probabilit√©s
                fig, ax = plt.subplots(figsize=(8, 4))
                sns.barplot(x=['Sain', '√Ä risque'], y=proba, 
                            palette=['#28a745', '#dc3545'], ax=ax)
                ax.set_ylabel('Probabilit√©')
                ax.set_title('Probabilit√© de maladie cardiaque')
                for p in ax.patches:
                    ax.annotate(f'{p.get_height():.1%}', 
                                (p.get_x() + p.get_width() / 2., p.get_height()), 
                                ha='center', va='center', 
                                xytext=(0, 10), 
                                textcoords='offset points')
                st.pyplot(fig)
            
            # Recommandations personnalis√©es
            st.markdown("---")
            st.subheader("üìå Recommandations personnalis√©es")
            
            if prediction[0] == 1:
                rec_col1, rec_col2 = st.columns(2)
                
                with rec_col1:
                    st.markdown("""
                    **üè• Consultation m√©dicale urgente**
                    - Prendre rendez-vous avec un cardiologue dans les plus brefs d√©lais
                    - Faire un bilan cardiaque complet (ECG, √©chocardiogramme)
                    - Surveillance r√©guli√®re de la pression art√©rielle
                    """)
                    
                with rec_col2:
                    st.markdown("""
                    **üíä Gestion m√©dicale**
                    - √âvaluation des facteurs de risque modifiables
                    - Bilan lipidique complet
                    - Possible traitement m√©dicamenteux selon avis m√©dical
                    """)
                
                st.markdown("""
                **üèÉ Mode de vie √† adopter**
                - Arr√™t imm√©diat du tabac si applicable
                - R√©duction de la consommation d'alcool
                - Activit√© physique mod√©r√©e et r√©guli√®re (30 min/jour)
                - Alimentation m√©diterran√©enne (riche en fruits, l√©gumes, poissons)
                """)
            else:
                st.markdown("""
                **ü©∫ Conseils de pr√©vention**
                - Maintenir un mode de vie sain (alimentation √©quilibr√©e, activit√© physique)
                - Contr√¥les m√©dicaux r√©guliers (tous les 2 ans apr√®s 40 ans)
                - Surveillance des facteurs de risque (pression art√©rielle, cholest√©rol)
                """)
                
                st.markdown("""
                **üçè Pr√©vention active**
                - Consommation quotidienne de fruits et l√©gumes
                - Limitation des graisses satur√©es et du sel
                - Activit√© physique r√©guli√®re (150 min/semaine)
                - Gestion du stress (m√©ditation, yoga)
                """)
            
            # Analyse des facteurs influents
            st.markdown("---")
            st.subheader("üîç Facteurs influents dans la pr√©diction")
            
            # Simulation de l'importance des features (√† adapter avec votre mod√®le)
            feature_importance = {
                'chest pain type': 0.25,
                'oldpeak': 0.20,
                'ST slope': 0.18,
                'age': 0.15,
                'resting bp s': 0.12,
                'cholesterol': 0.10
            }
            
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.barplot(x=list(feature_importance.values()), 
                        y=list(feature_importance.keys()), 
                        palette="Reds_r", ax=ax)
            ax.set_title('Importance des facteurs dans la pr√©diction')
            ax.set_xlabel('Importance relative')
            st.pyplot(fig)
            
        except Exception as e:
            st.error(f"Erreur lors de la pr√©diction: {e}")

with tab2:
    st.subheader("Analyse exploratoire des donn√©es")
    
    # Statistiques descriptives
    st.markdown("### üìà Statistiques descriptives")
    st.dataframe(dataset.describe())
    
    # Distribution des variables cl√©s
    st.markdown("### üìä Distribution des variables cl√©s")
    
    col1, col2 = st.columns(2)
    with col1:
        fig = plt.figure(figsize=(8, 4))
        sns.histplot(dataset['age'], bins=20, kde=True)
        plt.title('Distribution des √¢ges')
        st.pyplot(fig)
        
    with col2:
        fig = plt.figure(figsize=(8, 4))
        sns.countplot(x='sex', data=dataset)
        plt.title('R√©partition par sexe (0=Femme, 1=Homme)')
        st.pyplot(fig)
    
    # Corr√©lations
    st.markdown("### üîó Matrice de corr√©lation")
    fig = plt.figure(figsize=(10, 8))
    sns.heatmap(dataset.corr(), annot=True, fmt=".1f", cmap="coolwarm")
    plt.title('Corr√©lation entre les variables')
    st.pyplot(fig)
    
    # Analyse par groupe de risque
    st.markdown("### ‚ö†Ô∏è Analyse par groupe de risque")
    fig = plt.figure(figsize=(12, 6))
    
    plt.subplot(2, 2, 1)
    sns.boxplot(x='target', y='age', data=dataset)
    plt.title('√Çge par groupe de risque')
    
    plt.subplot(2, 2, 2)
    sns.boxplot(x='target', y='resting bp s', data=dataset)
    plt.title('Pression art√©rielle par groupe de risque')
    
    plt.subplot(2, 2, 3)
    sns.boxplot(x='target', y='cholesterol', data=dataset)
    plt.title('Cholest√©rol par groupe de risque')
    
    plt.subplot(2, 2, 4)
    sns.boxplot(x='target', y='oldpeak', data=dataset)
    plt.title('D√©pression ST par groupe de risque')
    
    plt.tight_layout()
    st.pyplot(fig)

with tab3:
    st.subheader("Guide d'utilisation")
    st.markdown("""
    **Comment utiliser l'application ?**
    1. Remplissez tous les champs du formulaire de pr√©diction
    2. Cliquez sur le bouton "Analyser le risque cardiaque"
    3. Consultez les r√©sultats et recommandations personnalis√©es
    4. Explorez les donn√©es dans l'onglet d'analyse
    """)
    
    st.markdown("---")
    st.subheader("Explications des param√®tres")
    
    with st.expander("D√©tails des variables m√©dicales"):
        st.markdown("""
        - **√Çge**: √Çge du patient en ann√©es
        - **Sexe**: 0 = Femme, 1 = Homme
        - **Type de douleur thoracique**: 
          - 0: Angine typique
          - 1: Douleur atypique
          - 2: Douleur non-angineuse
          - 3: Asymptomatique
        - **Pression art√©rielle**: Pression au repos en mm Hg
        - **Cholest√©rol**: Niveau en mg/dl
        - **Glyc√©mie √† jeun**: 0 = <120 mg/dl, 1 = >120 mg/dl
        - **R√©sultat ECG**: 
          - 0: Normal
          - 1: Anomalie onde ST-T
          - 2: Hypertrophie ventriculaire gauche
        - **Angine induite**: 0 = Non, 1 = Oui
        - **D√©pression ST**: Mesure en mm
        - **Pente ST**: 
          - 0: Descendante
          - 1: Plate
          - 2: Ascendante
        """)
    
    st.markdown("---")
    st.subheader("√Ä propos")
    st.markdown("""
     Notre application permet de pr√©dire le risque cardiaque bas√©e sur une apprentissage automatique.
    
    Notre mod√®le a √©t√© entra√Æn√© sur un jeu de donn√©es de patients avec diff√©rentes caract√©ristiques cardiovasculaires.
    
    ‚ö†Ô∏è **Note importante:** Les r√©sultats sont des estimations statistiques et ne remplacent pas un diagnostic m√©dical professionnel.
    """)